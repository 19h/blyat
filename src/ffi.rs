/* automatically generated by rust-bindgen */

pub const ULONG_MAX: i32 = -1;
pub const ULLONG_MAX: i32 = -1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpaqueJSContextGroup {
    _unused: [u8; 0],
}
pub type JSContextGroupRef = *const OpaqueJSContextGroup;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpaqueJSContext {
    _unused: [u8; 0],
}
pub type JSContextRef = *const OpaqueJSContext;
pub type JSGlobalContextRef = *mut OpaqueJSContext;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpaqueJSString {
    _unused: [u8; 0],
}
pub type JSStringRef = *mut OpaqueJSString;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpaqueJSClass {
    _unused: [u8; 0],
}
pub type JSClassRef = *mut OpaqueJSClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpaqueJSPropertyNameArray {
    _unused: [u8; 0],
}
pub type JSPropertyNameArrayRef = *mut OpaqueJSPropertyNameArray;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpaqueJSPropertyNameAccumulator {
    _unused: [u8; 0],
}
pub type JSPropertyNameAccumulatorRef = *mut OpaqueJSPropertyNameAccumulator;
pub type JSTypedArrayBytesDeallocator = ::core::option::Option<
    unsafe extern "C" fn(
        bytes: *mut ::std::os::raw::c_void,
        deallocatorContext: *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpaqueJSValue {
    _unused: [u8; 0],
}
pub type JSValueRef = *const OpaqueJSValue;
pub type JSObjectRef = *mut OpaqueJSValue;
extern "C" {
    #[link_name = "\u{1}_JSEvaluateScript"]
    pub fn JSEvaluateScript(
        ctx: JSContextRef,
        script: JSStringRef,
        thisObject: JSObjectRef,
        sourceURL: JSStringRef,
        startingLineNumber: ::std::os::raw::c_int,
        exception: *mut JSValueRef,
    ) -> JSValueRef;
}
extern "C" {
    #[link_name = "\u{1}_JSCheckScriptSyntax"]
    pub fn JSCheckScriptSyntax(
        ctx: JSContextRef,
        script: JSStringRef,
        sourceURL: JSStringRef,
        startingLineNumber: ::std::os::raw::c_int,
        exception: *mut JSValueRef,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_JSGarbageCollect"]
    pub fn JSGarbageCollect(ctx: JSContextRef);
}
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __darwin_size_t = ::std::os::raw::c_ulong;
pub type __darwin_wchar_t = ::std::os::raw::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type u_int64_t = ::std::os::raw::c_ulonglong;
pub type user_ulong_t = u_int64_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RuneEntry {
    pub __min: __darwin_rune_t,
    pub __max: __darwin_rune_t,
    pub __map: __darwin_rune_t,
    pub __types: *mut __uint32_t,
}
#[test]
fn bindgen_test_layout__RuneEntry() {
    assert_eq!(
        ::core::mem::size_of::<_RuneEntry>(),
        24usize,
        concat!("Size of: ", stringify!(_RuneEntry))
    );
    assert_eq!(
        ::core::mem::align_of::<_RuneEntry>(),
        8usize,
        concat!("Alignment of ", stringify!(_RuneEntry))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_RuneEntry>())).__min as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneEntry),
            "::",
            stringify!(__min)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_RuneEntry>())).__max as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneEntry),
            "::",
            stringify!(__max)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_RuneEntry>())).__map as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneEntry),
            "::",
            stringify!(__map)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_RuneEntry>())).__types as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneEntry),
            "::",
            stringify!(__types)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RuneRange {
    pub __nranges: ::std::os::raw::c_int,
    pub __ranges: *mut _RuneEntry,
}
#[test]
fn bindgen_test_layout__RuneRange() {
    assert_eq!(
        ::core::mem::size_of::<_RuneRange>(),
        16usize,
        concat!("Size of: ", stringify!(_RuneRange))
    );
    assert_eq!(
        ::core::mem::align_of::<_RuneRange>(),
        8usize,
        concat!("Alignment of ", stringify!(_RuneRange))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_RuneRange>())).__nranges as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneRange),
            "::",
            stringify!(__nranges)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_RuneRange>())).__ranges as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneRange),
            "::",
            stringify!(__ranges)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RuneCharClass {
    pub __name: [::std::os::raw::c_char; 14usize],
    pub __mask: __uint32_t,
}
#[test]
fn bindgen_test_layout__RuneCharClass() {
    assert_eq!(
        ::core::mem::size_of::<_RuneCharClass>(),
        20usize,
        concat!("Size of: ", stringify!(_RuneCharClass))
    );
    assert_eq!(
        ::core::mem::align_of::<_RuneCharClass>(),
        4usize,
        concat!("Alignment of ", stringify!(_RuneCharClass))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_RuneCharClass>())).__name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneCharClass),
            "::",
            stringify!(__name)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_RuneCharClass>())).__mask as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneCharClass),
            "::",
            stringify!(__mask)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _RuneLocale {
    pub __magic: [::std::os::raw::c_char; 8usize],
    pub __encoding: [::std::os::raw::c_char; 32usize],
    pub __sgetrune: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: __darwin_size_t,
            arg3: *mut *const ::std::os::raw::c_char,
        ) -> __darwin_rune_t,
    >,
    pub __sputrune: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: __darwin_rune_t,
            arg2: *mut ::std::os::raw::c_char,
            arg3: __darwin_size_t,
            arg4: *mut *mut ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub __invalid_rune: __darwin_rune_t,
    pub __runetype: [__uint32_t; 256usize],
    pub __maplower: [__darwin_rune_t; 256usize],
    pub __mapupper: [__darwin_rune_t; 256usize],
    pub __runetype_ext: _RuneRange,
    pub __maplower_ext: _RuneRange,
    pub __mapupper_ext: _RuneRange,
    pub __variable: *mut ::std::os::raw::c_void,
    pub __variable_len: ::std::os::raw::c_int,
    pub __ncharclasses: ::std::os::raw::c_int,
    pub __charclasses: *mut _RuneCharClass,
}
#[test]
fn bindgen_test_layout__RuneLocale() {
    assert_eq!(
        ::core::mem::size_of::<_RuneLocale>(),
        3208usize,
        concat!("Size of: ", stringify!(_RuneLocale))
    );
    assert_eq!(
        ::core::mem::align_of::<_RuneLocale>(),
        8usize,
        concat!("Alignment of ", stringify!(_RuneLocale))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_RuneLocale>())).__magic as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneLocale),
            "::",
            stringify!(__magic)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_RuneLocale>())).__encoding as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneLocale),
            "::",
            stringify!(__encoding)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_RuneLocale>())).__sgetrune as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneLocale),
            "::",
            stringify!(__sgetrune)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_RuneLocale>())).__sputrune as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneLocale),
            "::",
            stringify!(__sputrune)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_RuneLocale>())).__invalid_rune as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneLocale),
            "::",
            stringify!(__invalid_rune)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_RuneLocale>())).__runetype as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneLocale),
            "::",
            stringify!(__runetype)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_RuneLocale>())).__maplower as *const _ as usize },
        1084usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneLocale),
            "::",
            stringify!(__maplower)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_RuneLocale>())).__mapupper as *const _ as usize },
        2108usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneLocale),
            "::",
            stringify!(__mapupper)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_RuneLocale>())).__runetype_ext as *const _ as usize },
        3136usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneLocale),
            "::",
            stringify!(__runetype_ext)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_RuneLocale>())).__maplower_ext as *const _ as usize },
        3152usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneLocale),
            "::",
            stringify!(__maplower_ext)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_RuneLocale>())).__mapupper_ext as *const _ as usize },
        3168usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneLocale),
            "::",
            stringify!(__mapupper_ext)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_RuneLocale>())).__variable as *const _ as usize },
        3184usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneLocale),
            "::",
            stringify!(__variable)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_RuneLocale>())).__variable_len as *const _ as usize },
        3192usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneLocale),
            "::",
            stringify!(__variable_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_RuneLocale>())).__ncharclasses as *const _ as usize },
        3196usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneLocale),
            "::",
            stringify!(__ncharclasses)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_RuneLocale>())).__charclasses as *const _ as usize },
        3200usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneLocale),
            "::",
            stringify!(__charclasses)
        )
    );
}
impl ::core::fmt::Debug for _RuneLocale {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write ! ( f , "_RuneLocale {{ __magic: {:?}, __encoding: [...], __sgetrune: {:?}, __sputrune: {:?}, __invalid_rune: {:?}, __runetype: [...], __maplower: [...], __mapupper: [...], __runetype_ext: {:?}, __maplower_ext: {:?}, __mapupper_ext: {:?}, __variable: {:?}, __variable_len: {:?}, __ncharclasses: {:?}, __charclasses: {:?} }}" , self . __magic , self . __sgetrune , self . __sputrune , self . __invalid_rune , self . __runetype_ext , self . __maplower_ext , self . __mapupper_ext , self . __variable , self . __variable_len , self . __ncharclasses , self . __charclasses )
    }
}
extern "C" {
    #[link_name = "\u{1}__DefaultRuneLocale"]
    pub static mut _DefaultRuneLocale: _RuneLocale;
}
extern "C" {
    #[link_name = "\u{1}_strtoul"]
    pub fn strtoul(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    #[link_name = "\u{1}_strtoull"]
    pub fn strtoull(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
pub type UInt16 = ::std::os::raw::c_ushort;
pub type SInt32 = ::std::os::raw::c_int;
pub type CFTypeID = ::std::os::raw::c_ulong;
pub type CFOptionFlags = ::std::os::raw::c_ulong;
pub type CFIndex = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFString {
    _unused: [u8; 0],
}
pub type CFStringRef = *const __CFString;
pub type CFComparisonResult = CFIndex;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFRange {
    pub location: CFIndex,
    pub length: CFIndex,
}
#[test]
fn bindgen_test_layout_CFRange() {
    assert_eq!(
        ::core::mem::size_of::<CFRange>(),
        16usize,
        concat!("Size of: ", stringify!(CFRange))
    );
    assert_eq!(
        ::core::mem::align_of::<CFRange>(),
        8usize,
        concat!("Alignment of ", stringify!(CFRange))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<CFRange>())).location as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CFRange),
            "::",
            stringify!(location)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<CFRange>())).length as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CFRange),
            "::",
            stringify!(length)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFNull {
    _unused: [u8; 0],
}
pub type CFNullRef = *const __CFNull;
extern "C" {
    #[link_name = "\u{1}_CFNullGetTypeID"]
    pub fn CFNullGetTypeID() -> CFTypeID;
}
extern "C" {
    #[link_name = "\u{1}_kCFNull"]
    pub static kCFNull: CFNullRef;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFAllocator {
    _unused: [u8; 0],
}
pub type CFAllocatorRef = *const __CFAllocator;
extern "C" {
    #[link_name = "\u{1}_kCFAllocatorDefault"]
    pub static kCFAllocatorDefault: CFAllocatorRef;
}
extern "C" {
    #[link_name = "\u{1}_kCFAllocatorSystemDefault"]
    pub static kCFAllocatorSystemDefault: CFAllocatorRef;
}
extern "C" {
    #[link_name = "\u{1}_kCFAllocatorNull"]
    pub static kCFAllocatorNull: CFAllocatorRef;
}
extern "C" {
    #[link_name = "\u{1}_CFAllocatorSetDefault"]
    pub fn CFAllocatorSetDefault(allocator: CFAllocatorRef);
}
extern "C" {
    #[link_name = "\u{1}_CFAllocatorGetDefault"]
    pub fn CFAllocatorGetDefault() -> CFAllocatorRef;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFArray {
    _unused: [u8; 0],
}
pub type CFArrayRef = *const __CFArray;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFDictionary {
    _unused: [u8; 0],
}
pub type CFDictionaryRef = *const __CFDictionary;
pub type CFCalendarIdentifier = CFStringRef;
extern "C" {
    #[link_name = "\u{1}_kCFIslamicTabularCalendar"]
    pub static kCFIslamicTabularCalendar: CFCalendarIdentifier;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFTimeZone {
    _unused: [u8; 0],
}
pub type CFTimeZoneRef = *const __CFTimeZone;
pub type CFStringCompareFlags = CFOptionFlags;
extern "C" {
    #[link_name = "\u{1}_CFStringCreateArrayWithFindResults"]
    pub fn CFStringCreateArrayWithFindResults(
        alloc: CFAllocatorRef,
        theString: CFStringRef,
        stringToFind: CFStringRef,
        rangeToSearch: CFRange,
        compareOptions: CFStringCompareFlags,
    ) -> CFArrayRef;
}
extern "C" {
    #[link_name = "\u{1}_kCFStringTransformFullwidthHalfwidth"]
    pub static kCFStringTransformFullwidthHalfwidth: CFStringRef;
}
extern "C" {
    #[link_name = "\u{1}_kCFStringTransformLatinHangul"]
    pub static kCFStringTransformLatinHangul: CFStringRef;
}
extern "C" {
    #[link_name = "\u{1}_CFTimeZoneCopyDefault"]
    pub fn CFTimeZoneCopyDefault() -> CFTimeZoneRef;
}
extern "C" {
    #[link_name = "\u{1}_CFTimeZoneSetDefault"]
    pub fn CFTimeZoneSetDefault(tz: CFTimeZoneRef);
}
pub type CFDateFormatterKey = CFStringRef;
pub const kCFDateFormatterNoStyle: _bindgen_ty_21 = 0;
pub const kCFDateFormatterShortStyle: _bindgen_ty_21 = 1;
pub const kCFDateFormatterMediumStyle: _bindgen_ty_21 = 2;
pub const kCFDateFormatterLongStyle: _bindgen_ty_21 = 3;
pub const kCFDateFormatterFullStyle: _bindgen_ty_21 = 4;
pub type _bindgen_ty_21 = u32;
pub const kCFISO8601DateFormatWithYear: _bindgen_ty_22 = 1;
pub const kCFISO8601DateFormatWithMonth: _bindgen_ty_22 = 2;
pub const kCFISO8601DateFormatWithWeekOfYear: _bindgen_ty_22 = 4;
pub const kCFISO8601DateFormatWithDay: _bindgen_ty_22 = 16;
pub const kCFISO8601DateFormatWithTime: _bindgen_ty_22 = 32;
pub const kCFISO8601DateFormatWithTimeZone: _bindgen_ty_22 = 64;
pub const kCFISO8601DateFormatWithSpaceBetweenDateAndTime: _bindgen_ty_22 = 128;
pub const kCFISO8601DateFormatWithDashSeparatorInDate: _bindgen_ty_22 = 256;
pub const kCFISO8601DateFormatWithColonSeparatorInTime: _bindgen_ty_22 = 512;
pub const kCFISO8601DateFormatWithColonSeparatorInTimeZone: _bindgen_ty_22 = 1024;
pub const kCFISO8601DateFormatWithFractionalSeconds: _bindgen_ty_22 = 2048;
pub const kCFISO8601DateFormatWithFullDate: _bindgen_ty_22 = 275;
pub const kCFISO8601DateFormatWithFullTime: _bindgen_ty_22 = 1632;
pub const kCFISO8601DateFormatWithInternetDateTime: _bindgen_ty_22 = 1907;
pub type _bindgen_ty_22 = u32;
extern "C" {
    #[link_name = "\u{1}_kCFDateFormatterDefaultFormat"]
    pub static kCFDateFormatterDefaultFormat: CFDateFormatterKey;
}
extern "C" {
    #[link_name = "\u{1}_kCFDateFormatterDefaultDate"]
    pub static kCFDateFormatterDefaultDate: CFDateFormatterKey;
}
pub type CFNumberFormatterKey = CFStringRef;
extern "C" {
    #[link_name = "\u{1}_kCFNumberFormatterDefaultFormat"]
    pub static kCFNumberFormatterDefaultFormat: CFNumberFormatterKey;
}
extern "C" {
    #[link_name = "\u{1}_kCFNumberFormatterMultiplier"]
    pub static kCFNumberFormatterMultiplier: CFNumberFormatterKey;
}
extern "C" {
    #[link_name = "\u{1}_CFPreferencesCopyMultiple"]
    pub fn CFPreferencesCopyMultiple(
        keysToFetch: CFArrayRef,
        applicationID: CFStringRef,
        userName: CFStringRef,
        hostName: CFStringRef,
    ) -> CFDictionaryRef;
}
extern "C" {
    #[link_name = "\u{1}_CFPreferencesSetMultiple"]
    pub fn CFPreferencesSetMultiple(
        keysToSet: CFDictionaryRef,
        keysToRemove: CFArrayRef,
        applicationID: CFStringRef,
        userName: CFStringRef,
        hostName: CFStringRef,
    );
}
extern "C" {
    #[link_name = "\u{1}_kCFURLIsRegularFileKey"]
    pub static kCFURLIsRegularFileKey: CFStringRef;
}
extern "C" {
    #[link_name = "\u{1}_kCFURLFileResourceTypeRegular"]
    pub static kCFURLFileResourceTypeRegular: CFStringRef;
}
pub type CFRunLoopMode = CFStringRef;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFRunLoop {
    _unused: [u8; 0],
}
pub type CFRunLoopRef = *mut __CFRunLoop;
pub type CFRunLoopRunResult = SInt32;
extern "C" {
    #[link_name = "\u{1}_kCFRunLoopDefaultMode"]
    pub static kCFRunLoopDefaultMode: CFRunLoopMode;
}
extern "C" {
    #[link_name = "\u{1}_CFSocketSetDefaultNameRegistryPortNumber"]
    pub fn CFSocketSetDefaultNameRegistryPortNumber(port: UInt16);
}
extern "C" {
    #[link_name = "\u{1}_CFSocketGetDefaultNameRegistryPortNumber"]
    pub fn CFSocketGetDefaultNameRegistryPortNumber() -> UInt16;
}
extern "C" {
    #[link_name = "\u{1}_kCFSocketResultKey"]
    pub static kCFSocketResultKey: CFStringRef;
}
extern "C" {
    #[link_name = "\u{1}_getattrlistbulk"]
    pub fn getattrlistbulk(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: usize,
        arg5: u64,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFReadStream {
    _unused: [u8; 0],
}
pub type CFReadStreamRef = *mut __CFReadStream;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFWriteStream {
    _unused: [u8; 0],
}
pub type CFWriteStreamRef = *mut __CFWriteStream;
extern "C" {
    #[link_name = "\u{1}_CFReadStreamScheduleWithRunLoop"]
    pub fn CFReadStreamScheduleWithRunLoop(
        stream: CFReadStreamRef,
        runLoop: CFRunLoopRef,
        runLoopMode: CFRunLoopMode,
    );
}
extern "C" {
    #[link_name = "\u{1}_CFWriteStreamScheduleWithRunLoop"]
    pub fn CFWriteStreamScheduleWithRunLoop(
        stream: CFWriteStreamRef,
        runLoop: CFRunLoopRef,
        runLoopMode: CFRunLoopMode,
    );
}
extern "C" {
    #[link_name = "\u{1}_CFReadStreamUnscheduleFromRunLoop"]
    pub fn CFReadStreamUnscheduleFromRunLoop(
        stream: CFReadStreamRef,
        runLoop: CFRunLoopRef,
        runLoopMode: CFRunLoopMode,
    );
}
extern "C" {
    #[link_name = "\u{1}_CFWriteStreamUnscheduleFromRunLoop"]
    pub fn CFWriteStreamUnscheduleFromRunLoop(
        stream: CFWriteStreamRef,
        runLoop: CFRunLoopRef,
        runLoopMode: CFRunLoopMode,
    );
}
pub const kCFURLEnumeratorDefaultBehavior: _bindgen_ty_50 = 0;
pub const kCFURLEnumeratorDescendRecursively: _bindgen_ty_50 = 1;
pub const kCFURLEnumeratorSkipInvisibles: _bindgen_ty_50 = 2;
pub const kCFURLEnumeratorGenerateFileReferenceURLs: _bindgen_ty_50 = 4;
pub const kCFURLEnumeratorSkipPackageContents: _bindgen_ty_50 = 8;
pub const kCFURLEnumeratorIncludeDirectoriesPreOrder: _bindgen_ty_50 = 16;
pub const kCFURLEnumeratorIncludeDirectoriesPostOrder: _bindgen_ty_50 = 32;
pub type _bindgen_ty_50 = u32;
pub type CFURLEnumeratorResult = CFIndex;
pub const kCFUserNotificationDefaultResponse: _bindgen_ty_57 = 0;
pub const kCFUserNotificationAlternateResponse: _bindgen_ty_57 = 1;
pub const kCFUserNotificationOtherResponse: _bindgen_ty_57 = 2;
pub const kCFUserNotificationCancelResponse: _bindgen_ty_57 = 3;
pub type _bindgen_ty_57 = u32;
pub const kCFUserNotificationNoDefaultButtonFlag: _bindgen_ty_58 = 32;
pub const kCFUserNotificationUseRadioButtonsFlag: _bindgen_ty_58 = 64;
pub type _bindgen_ty_58 = u32;
extern "C" {
    #[link_name = "\u{1}_kCFUserNotificationDefaultButtonTitleKey"]
    pub static kCFUserNotificationDefaultButtonTitleKey: CFStringRef;
}
pub const kCFXMLStatusParseNotBegun: _bindgen_ty_63 = -2;
pub const kCFXMLStatusParseInProgress: _bindgen_ty_63 = -1;
pub const kCFXMLStatusParseSuccessful: _bindgen_ty_63 = 0;
pub const kCFXMLErrorUnexpectedEOF: _bindgen_ty_63 = 1;
pub const kCFXMLErrorUnknownEncoding: _bindgen_ty_63 = 2;
pub const kCFXMLErrorEncodingConversionFailure: _bindgen_ty_63 = 3;
pub const kCFXMLErrorMalformedProcessingInstruction: _bindgen_ty_63 = 4;
pub const kCFXMLErrorMalformedDTD: _bindgen_ty_63 = 5;
pub const kCFXMLErrorMalformedName: _bindgen_ty_63 = 6;
pub const kCFXMLErrorMalformedCDSect: _bindgen_ty_63 = 7;
pub const kCFXMLErrorMalformedCloseTag: _bindgen_ty_63 = 8;
pub const kCFXMLErrorMalformedStartTag: _bindgen_ty_63 = 9;
pub const kCFXMLErrorMalformedDocument: _bindgen_ty_63 = 10;
pub const kCFXMLErrorElementlessDocument: _bindgen_ty_63 = 11;
pub const kCFXMLErrorMalformedComment: _bindgen_ty_63 = 12;
pub const kCFXMLErrorMalformedCharacterReference: _bindgen_ty_63 = 13;
pub const kCFXMLErrorMalformedParsedCharacterData: _bindgen_ty_63 = 14;
pub const kCFXMLErrorNoData: _bindgen_ty_63 = 15;
pub type _bindgen_ty_63 = i32;
pub const JSType_kJSTypeUndefined: JSType = 0;
pub const JSType_kJSTypeNull: JSType = 1;
pub const JSType_kJSTypeBoolean: JSType = 2;
pub const JSType_kJSTypeNumber: JSType = 3;
pub const JSType_kJSTypeString: JSType = 4;
pub const JSType_kJSTypeObject: JSType = 5;
pub type JSType = u32;
pub const JSTypedArrayType_kJSTypedArrayTypeInt8Array: JSTypedArrayType = 0;
pub const JSTypedArrayType_kJSTypedArrayTypeInt16Array: JSTypedArrayType = 1;
pub const JSTypedArrayType_kJSTypedArrayTypeInt32Array: JSTypedArrayType = 2;
pub const JSTypedArrayType_kJSTypedArrayTypeUint8Array: JSTypedArrayType = 3;
pub const JSTypedArrayType_kJSTypedArrayTypeUint8ClampedArray: JSTypedArrayType = 4;
pub const JSTypedArrayType_kJSTypedArrayTypeUint16Array: JSTypedArrayType = 5;
pub const JSTypedArrayType_kJSTypedArrayTypeUint32Array: JSTypedArrayType = 6;
pub const JSTypedArrayType_kJSTypedArrayTypeFloat32Array: JSTypedArrayType = 7;
pub const JSTypedArrayType_kJSTypedArrayTypeFloat64Array: JSTypedArrayType = 8;
pub const JSTypedArrayType_kJSTypedArrayTypeArrayBuffer: JSTypedArrayType = 9;
pub const JSTypedArrayType_kJSTypedArrayTypeNone: JSTypedArrayType = 10;
pub type JSTypedArrayType = u32;
extern "C" {
    #[link_name = "\u{1}_JSValueGetType"]
    pub fn JSValueGetType(ctx: JSContextRef, value: JSValueRef) -> JSType;
}
extern "C" {
    #[link_name = "\u{1}_JSValueIsUndefined"]
    pub fn JSValueIsUndefined(ctx: JSContextRef, value: JSValueRef) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_JSValueIsNull"]
    pub fn JSValueIsNull(ctx: JSContextRef, value: JSValueRef) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_JSValueIsBoolean"]
    pub fn JSValueIsBoolean(ctx: JSContextRef, value: JSValueRef) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_JSValueIsNumber"]
    pub fn JSValueIsNumber(ctx: JSContextRef, value: JSValueRef) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_JSValueIsString"]
    pub fn JSValueIsString(ctx: JSContextRef, value: JSValueRef) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_JSValueIsObject"]
    pub fn JSValueIsObject(ctx: JSContextRef, value: JSValueRef) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_JSValueIsObjectOfClass"]
    pub fn JSValueIsObjectOfClass(
        ctx: JSContextRef,
        value: JSValueRef,
        jsClass: JSClassRef,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_JSValueIsArray"]
    pub fn JSValueIsArray(ctx: JSContextRef, value: JSValueRef) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_JSValueIsDate"]
    pub fn JSValueIsDate(ctx: JSContextRef, value: JSValueRef) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_JSValueGetTypedArrayType"]
    pub fn JSValueGetTypedArrayType(
        ctx: JSContextRef,
        value: JSValueRef,
        exception: *mut JSValueRef,
    ) -> JSTypedArrayType;
}
extern "C" {
    #[link_name = "\u{1}_JSValueIsEqual"]
    pub fn JSValueIsEqual(
        ctx: JSContextRef,
        a: JSValueRef,
        b: JSValueRef,
        exception: *mut JSValueRef,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_JSValueIsStrictEqual"]
    pub fn JSValueIsStrictEqual(ctx: JSContextRef, a: JSValueRef, b: JSValueRef) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_JSValueIsInstanceOfConstructor"]
    pub fn JSValueIsInstanceOfConstructor(
        ctx: JSContextRef,
        value: JSValueRef,
        constructor: JSObjectRef,
        exception: *mut JSValueRef,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_JSValueMakeUndefined"]
    pub fn JSValueMakeUndefined(ctx: JSContextRef) -> JSValueRef;
}
extern "C" {
    #[link_name = "\u{1}_JSValueMakeNull"]
    pub fn JSValueMakeNull(ctx: JSContextRef) -> JSValueRef;
}
extern "C" {
    #[link_name = "\u{1}_JSValueMakeBoolean"]
    pub fn JSValueMakeBoolean(ctx: JSContextRef, boolean: bool) -> JSValueRef;
}
extern "C" {
    #[link_name = "\u{1}_JSValueMakeNumber"]
    pub fn JSValueMakeNumber(ctx: JSContextRef, number: f64) -> JSValueRef;
}
extern "C" {
    #[link_name = "\u{1}_JSValueMakeString"]
    pub fn JSValueMakeString(ctx: JSContextRef, string: JSStringRef) -> JSValueRef;
}
extern "C" {
    #[link_name = "\u{1}_JSValueMakeFromJSONString"]
    pub fn JSValueMakeFromJSONString(ctx: JSContextRef, string: JSStringRef) -> JSValueRef;
}
extern "C" {
    #[link_name = "\u{1}_JSValueCreateJSONString"]
    pub fn JSValueCreateJSONString(
        ctx: JSContextRef,
        value: JSValueRef,
        indent: ::std::os::raw::c_uint,
        exception: *mut JSValueRef,
    ) -> JSStringRef;
}
extern "C" {
    #[link_name = "\u{1}_JSValueToBoolean"]
    pub fn JSValueToBoolean(ctx: JSContextRef, value: JSValueRef) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_JSValueToNumber"]
    pub fn JSValueToNumber(ctx: JSContextRef, value: JSValueRef, exception: *mut JSValueRef)
        -> f64;
}
extern "C" {
    #[link_name = "\u{1}_JSValueToStringCopy"]
    pub fn JSValueToStringCopy(
        ctx: JSContextRef,
        value: JSValueRef,
        exception: *mut JSValueRef,
    ) -> JSStringRef;
}
extern "C" {
    #[link_name = "\u{1}_JSValueToObject"]
    pub fn JSValueToObject(
        ctx: JSContextRef,
        value: JSValueRef,
        exception: *mut JSValueRef,
    ) -> JSObjectRef;
}
extern "C" {
    #[link_name = "\u{1}_JSValueProtect"]
    pub fn JSValueProtect(ctx: JSContextRef, value: JSValueRef);
}
extern "C" {
    #[link_name = "\u{1}_JSValueUnprotect"]
    pub fn JSValueUnprotect(ctx: JSContextRef, value: JSValueRef);
}
pub const kJSPropertyAttributeNone: _bindgen_ty_64 = 0;
pub const kJSPropertyAttributeReadOnly: _bindgen_ty_64 = 2;
pub const kJSPropertyAttributeDontEnum: _bindgen_ty_64 = 4;
pub const kJSPropertyAttributeDontDelete: _bindgen_ty_64 = 8;
pub type _bindgen_ty_64 = u32;
pub type JSPropertyAttributes = ::std::os::raw::c_uint;
pub const kJSClassAttributeNone: _bindgen_ty_65 = 0;
pub const kJSClassAttributeNoAutomaticPrototype: _bindgen_ty_65 = 2;
pub type _bindgen_ty_65 = u32;
pub type JSClassAttributes = ::std::os::raw::c_uint;
pub type JSObjectInitializeCallback =
    ::core::option::Option<unsafe extern "C" fn(ctx: JSContextRef, object: JSObjectRef)>;
pub type JSObjectFinalizeCallback =
    ::core::option::Option<unsafe extern "C" fn(object: JSObjectRef)>;
pub type JSObjectHasPropertyCallback = ::core::option::Option<
    unsafe extern "C" fn(ctx: JSContextRef, object: JSObjectRef, propertyName: JSStringRef) -> bool,
>;
pub type JSObjectGetPropertyCallback = ::core::option::Option<
    unsafe extern "C" fn(
        ctx: JSContextRef,
        object: JSObjectRef,
        propertyName: JSStringRef,
        exception: *mut JSValueRef,
    ) -> JSValueRef,
>;
pub type JSObjectSetPropertyCallback = ::core::option::Option<
    unsafe extern "C" fn(
        ctx: JSContextRef,
        object: JSObjectRef,
        propertyName: JSStringRef,
        value: JSValueRef,
        exception: *mut JSValueRef,
    ) -> bool,
>;
pub type JSObjectDeletePropertyCallback = ::core::option::Option<
    unsafe extern "C" fn(
        ctx: JSContextRef,
        object: JSObjectRef,
        propertyName: JSStringRef,
        exception: *mut JSValueRef,
    ) -> bool,
>;
pub type JSObjectGetPropertyNamesCallback = ::core::option::Option<
    unsafe extern "C" fn(
        ctx: JSContextRef,
        object: JSObjectRef,
        propertyNames: JSPropertyNameAccumulatorRef,
    ),
>;
pub type JSObjectCallAsFunctionCallback = ::core::option::Option<
    unsafe extern "C" fn(
        ctx: JSContextRef,
        function: JSObjectRef,
        thisObject: JSObjectRef,
        argumentCount: usize,
        arguments: *const JSValueRef,
        exception: *mut JSValueRef,
    ) -> JSValueRef,
>;
pub type JSObjectCallAsConstructorCallback = ::core::option::Option<
    unsafe extern "C" fn(
        ctx: JSContextRef,
        constructor: JSObjectRef,
        argumentCount: usize,
        arguments: *const JSValueRef,
        exception: *mut JSValueRef,
    ) -> JSObjectRef,
>;
pub type JSObjectHasInstanceCallback = ::core::option::Option<
    unsafe extern "C" fn(
        ctx: JSContextRef,
        constructor: JSObjectRef,
        possibleInstance: JSValueRef,
        exception: *mut JSValueRef,
    ) -> bool,
>;
pub type JSObjectConvertToTypeCallback = ::core::option::Option<
    unsafe extern "C" fn(
        ctx: JSContextRef,
        object: JSObjectRef,
        type_: JSType,
        exception: *mut JSValueRef,
    ) -> JSValueRef,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JSStaticValue {
    pub name: *const ::std::os::raw::c_char,
    pub getProperty: JSObjectGetPropertyCallback,
    pub setProperty: JSObjectSetPropertyCallback,
    pub attributes: JSPropertyAttributes,
}
#[test]
fn bindgen_test_layout_JSStaticValue() {
    assert_eq!(
        ::core::mem::size_of::<JSStaticValue>(),
        32usize,
        concat!("Size of: ", stringify!(JSStaticValue))
    );
    assert_eq!(
        ::core::mem::align_of::<JSStaticValue>(),
        8usize,
        concat!("Alignment of ", stringify!(JSStaticValue))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<JSStaticValue>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JSStaticValue),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<JSStaticValue>())).getProperty as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(JSStaticValue),
            "::",
            stringify!(getProperty)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<JSStaticValue>())).setProperty as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(JSStaticValue),
            "::",
            stringify!(setProperty)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<JSStaticValue>())).attributes as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(JSStaticValue),
            "::",
            stringify!(attributes)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JSStaticFunction {
    pub name: *const ::std::os::raw::c_char,
    pub callAsFunction: JSObjectCallAsFunctionCallback,
    pub attributes: JSPropertyAttributes,
}
#[test]
fn bindgen_test_layout_JSStaticFunction() {
    assert_eq!(
        ::core::mem::size_of::<JSStaticFunction>(),
        24usize,
        concat!("Size of: ", stringify!(JSStaticFunction))
    );
    assert_eq!(
        ::core::mem::align_of::<JSStaticFunction>(),
        8usize,
        concat!("Alignment of ", stringify!(JSStaticFunction))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<JSStaticFunction>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JSStaticFunction),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<JSStaticFunction>())).callAsFunction as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(JSStaticFunction),
            "::",
            stringify!(callAsFunction)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<JSStaticFunction>())).attributes as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(JSStaticFunction),
            "::",
            stringify!(attributes)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JSClassDefinition {
    pub version: ::std::os::raw::c_int,
    pub attributes: JSClassAttributes,
    pub className: *const ::std::os::raw::c_char,
    pub parentClass: JSClassRef,
    pub staticValues: *const JSStaticValue,
    pub staticFunctions: *const JSStaticFunction,
    pub initialize: JSObjectInitializeCallback,
    pub finalize: JSObjectFinalizeCallback,
    pub hasProperty: JSObjectHasPropertyCallback,
    pub getProperty: JSObjectGetPropertyCallback,
    pub setProperty: JSObjectSetPropertyCallback,
    pub deleteProperty: JSObjectDeletePropertyCallback,
    pub getPropertyNames: JSObjectGetPropertyNamesCallback,
    pub callAsFunction: JSObjectCallAsFunctionCallback,
    pub callAsConstructor: JSObjectCallAsConstructorCallback,
    pub hasInstance: JSObjectHasInstanceCallback,
    pub convertToType: JSObjectConvertToTypeCallback,
}
#[test]
fn bindgen_test_layout_JSClassDefinition() {
    assert_eq!(
        ::core::mem::size_of::<JSClassDefinition>(),
        128usize,
        concat!("Size of: ", stringify!(JSClassDefinition))
    );
    assert_eq!(
        ::core::mem::align_of::<JSClassDefinition>(),
        8usize,
        concat!("Alignment of ", stringify!(JSClassDefinition))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<JSClassDefinition>())).version as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JSClassDefinition),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<JSClassDefinition>())).attributes as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(JSClassDefinition),
            "::",
            stringify!(attributes)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<JSClassDefinition>())).className as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(JSClassDefinition),
            "::",
            stringify!(className)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<JSClassDefinition>())).parentClass as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(JSClassDefinition),
            "::",
            stringify!(parentClass)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<JSClassDefinition>())).staticValues as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(JSClassDefinition),
            "::",
            stringify!(staticValues)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<JSClassDefinition>())).staticFunctions as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(JSClassDefinition),
            "::",
            stringify!(staticFunctions)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<JSClassDefinition>())).initialize as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(JSClassDefinition),
            "::",
            stringify!(initialize)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<JSClassDefinition>())).finalize as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(JSClassDefinition),
            "::",
            stringify!(finalize)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<JSClassDefinition>())).hasProperty as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(JSClassDefinition),
            "::",
            stringify!(hasProperty)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<JSClassDefinition>())).getProperty as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(JSClassDefinition),
            "::",
            stringify!(getProperty)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<JSClassDefinition>())).setProperty as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(JSClassDefinition),
            "::",
            stringify!(setProperty)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<JSClassDefinition>())).deleteProperty as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(JSClassDefinition),
            "::",
            stringify!(deleteProperty)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<JSClassDefinition>())).getPropertyNames as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(JSClassDefinition),
            "::",
            stringify!(getPropertyNames)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<JSClassDefinition>())).callAsFunction as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(JSClassDefinition),
            "::",
            stringify!(callAsFunction)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<JSClassDefinition>())).callAsConstructor as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(JSClassDefinition),
            "::",
            stringify!(callAsConstructor)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<JSClassDefinition>())).hasInstance as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(JSClassDefinition),
            "::",
            stringify!(hasInstance)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<JSClassDefinition>())).convertToType as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(JSClassDefinition),
            "::",
            stringify!(convertToType)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_kJSClassDefinitionEmpty"]
    pub static kJSClassDefinitionEmpty: JSClassDefinition;
}
extern "C" {
    #[link_name = "\u{1}_JSClassCreate"]
    pub fn JSClassCreate(definition: *const JSClassDefinition) -> JSClassRef;
}
extern "C" {
    #[link_name = "\u{1}_JSClassRetain"]
    pub fn JSClassRetain(jsClass: JSClassRef) -> JSClassRef;
}
extern "C" {
    #[link_name = "\u{1}_JSClassRelease"]
    pub fn JSClassRelease(jsClass: JSClassRef);
}
extern "C" {
    #[link_name = "\u{1}_JSObjectMake"]
    pub fn JSObjectMake(
        ctx: JSContextRef,
        jsClass: JSClassRef,
        data: *mut ::std::os::raw::c_void,
    ) -> JSObjectRef;
}
extern "C" {
    #[link_name = "\u{1}_JSObjectMakeFunctionWithCallback"]
    pub fn JSObjectMakeFunctionWithCallback(
        ctx: JSContextRef,
        name: JSStringRef,
        callAsFunction: JSObjectCallAsFunctionCallback,
    ) -> JSObjectRef;
}
extern "C" {
    #[link_name = "\u{1}_JSObjectMakeConstructor"]
    pub fn JSObjectMakeConstructor(
        ctx: JSContextRef,
        jsClass: JSClassRef,
        callAsConstructor: JSObjectCallAsConstructorCallback,
    ) -> JSObjectRef;
}
extern "C" {
    #[link_name = "\u{1}_JSObjectMakeArray"]
    pub fn JSObjectMakeArray(
        ctx: JSContextRef,
        argumentCount: usize,
        arguments: *const JSValueRef,
        exception: *mut JSValueRef,
    ) -> JSObjectRef;
}
extern "C" {
    #[link_name = "\u{1}_JSObjectMakeDate"]
    pub fn JSObjectMakeDate(
        ctx: JSContextRef,
        argumentCount: usize,
        arguments: *const JSValueRef,
        exception: *mut JSValueRef,
    ) -> JSObjectRef;
}
extern "C" {
    #[link_name = "\u{1}_JSObjectMakeError"]
    pub fn JSObjectMakeError(
        ctx: JSContextRef,
        argumentCount: usize,
        arguments: *const JSValueRef,
        exception: *mut JSValueRef,
    ) -> JSObjectRef;
}
extern "C" {
    #[link_name = "\u{1}_JSObjectMakeRegExp"]
    pub fn JSObjectMakeRegExp(
        ctx: JSContextRef,
        argumentCount: usize,
        arguments: *const JSValueRef,
        exception: *mut JSValueRef,
    ) -> JSObjectRef;
}
extern "C" {
    #[link_name = "\u{1}_JSObjectMakeFunction"]
    pub fn JSObjectMakeFunction(
        ctx: JSContextRef,
        name: JSStringRef,
        parameterCount: ::std::os::raw::c_uint,
        parameterNames: *const JSStringRef,
        body: JSStringRef,
        sourceURL: JSStringRef,
        startingLineNumber: ::std::os::raw::c_int,
        exception: *mut JSValueRef,
    ) -> JSObjectRef;
}
extern "C" {
    #[link_name = "\u{1}_JSObjectGetPrototype"]
    pub fn JSObjectGetPrototype(ctx: JSContextRef, object: JSObjectRef) -> JSValueRef;
}
extern "C" {
    #[link_name = "\u{1}_JSObjectSetPrototype"]
    pub fn JSObjectSetPrototype(ctx: JSContextRef, object: JSObjectRef, value: JSValueRef);
}
extern "C" {
    #[link_name = "\u{1}_JSObjectHasProperty"]
    pub fn JSObjectHasProperty(
        ctx: JSContextRef,
        object: JSObjectRef,
        propertyName: JSStringRef,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_JSObjectGetProperty"]
    pub fn JSObjectGetProperty(
        ctx: JSContextRef,
        object: JSObjectRef,
        propertyName: JSStringRef,
        exception: *mut JSValueRef,
    ) -> JSValueRef;
}
extern "C" {
    #[link_name = "\u{1}_JSObjectSetProperty"]
    pub fn JSObjectSetProperty(
        ctx: JSContextRef,
        object: JSObjectRef,
        propertyName: JSStringRef,
        value: JSValueRef,
        attributes: JSPropertyAttributes,
        exception: *mut JSValueRef,
    );
}
extern "C" {
    #[link_name = "\u{1}_JSObjectDeleteProperty"]
    pub fn JSObjectDeleteProperty(
        ctx: JSContextRef,
        object: JSObjectRef,
        propertyName: JSStringRef,
        exception: *mut JSValueRef,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_JSObjectGetPropertyAtIndex"]
    pub fn JSObjectGetPropertyAtIndex(
        ctx: JSContextRef,
        object: JSObjectRef,
        propertyIndex: ::std::os::raw::c_uint,
        exception: *mut JSValueRef,
    ) -> JSValueRef;
}
extern "C" {
    #[link_name = "\u{1}_JSObjectSetPropertyAtIndex"]
    pub fn JSObjectSetPropertyAtIndex(
        ctx: JSContextRef,
        object: JSObjectRef,
        propertyIndex: ::std::os::raw::c_uint,
        value: JSValueRef,
        exception: *mut JSValueRef,
    );
}
extern "C" {
    #[link_name = "\u{1}_JSObjectGetPrivate"]
    pub fn JSObjectGetPrivate(object: JSObjectRef) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_JSObjectSetPrivate"]
    pub fn JSObjectSetPrivate(object: JSObjectRef, data: *mut ::std::os::raw::c_void) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_JSObjectIsFunction"]
    pub fn JSObjectIsFunction(ctx: JSContextRef, object: JSObjectRef) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_JSObjectCallAsFunction"]
    pub fn JSObjectCallAsFunction(
        ctx: JSContextRef,
        object: JSObjectRef,
        thisObject: JSObjectRef,
        argumentCount: usize,
        arguments: *const JSValueRef,
        exception: *mut JSValueRef,
    ) -> JSValueRef;
}
extern "C" {
    #[link_name = "\u{1}_JSObjectIsConstructor"]
    pub fn JSObjectIsConstructor(ctx: JSContextRef, object: JSObjectRef) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_JSObjectCallAsConstructor"]
    pub fn JSObjectCallAsConstructor(
        ctx: JSContextRef,
        object: JSObjectRef,
        argumentCount: usize,
        arguments: *const JSValueRef,
        exception: *mut JSValueRef,
    ) -> JSObjectRef;
}
extern "C" {
    #[link_name = "\u{1}_JSObjectCopyPropertyNames"]
    pub fn JSObjectCopyPropertyNames(
        ctx: JSContextRef,
        object: JSObjectRef,
    ) -> JSPropertyNameArrayRef;
}
extern "C" {
    #[link_name = "\u{1}_JSPropertyNameArrayRetain"]
    pub fn JSPropertyNameArrayRetain(array: JSPropertyNameArrayRef) -> JSPropertyNameArrayRef;
}
extern "C" {
    #[link_name = "\u{1}_JSPropertyNameArrayRelease"]
    pub fn JSPropertyNameArrayRelease(array: JSPropertyNameArrayRef);
}
extern "C" {
    #[link_name = "\u{1}_JSPropertyNameArrayGetCount"]
    pub fn JSPropertyNameArrayGetCount(array: JSPropertyNameArrayRef) -> usize;
}
extern "C" {
    #[link_name = "\u{1}_JSPropertyNameArrayGetNameAtIndex"]
    pub fn JSPropertyNameArrayGetNameAtIndex(
        array: JSPropertyNameArrayRef,
        index: usize,
    ) -> JSStringRef;
}
extern "C" {
    #[link_name = "\u{1}_JSPropertyNameAccumulatorAddName"]
    pub fn JSPropertyNameAccumulatorAddName(
        accumulator: JSPropertyNameAccumulatorRef,
        propertyName: JSStringRef,
    );
}
extern "C" {
    #[link_name = "\u{1}_JSContextGroupCreate"]
    pub fn JSContextGroupCreate() -> JSContextGroupRef;
}
extern "C" {
    #[link_name = "\u{1}_JSContextGroupRetain"]
    pub fn JSContextGroupRetain(group: JSContextGroupRef) -> JSContextGroupRef;
}
extern "C" {
    #[link_name = "\u{1}_JSContextGroupRelease"]
    pub fn JSContextGroupRelease(group: JSContextGroupRef);
}
extern "C" {
    #[link_name = "\u{1}_JSGlobalContextCreate"]
    pub fn JSGlobalContextCreate(globalObjectClass: JSClassRef) -> JSGlobalContextRef;
}
extern "C" {
    #[link_name = "\u{1}_JSGlobalContextCreateInGroup"]
    pub fn JSGlobalContextCreateInGroup(
        group: JSContextGroupRef,
        globalObjectClass: JSClassRef,
    ) -> JSGlobalContextRef;
}
extern "C" {
    #[link_name = "\u{1}_JSGlobalContextRetain"]
    pub fn JSGlobalContextRetain(ctx: JSGlobalContextRef) -> JSGlobalContextRef;
}
extern "C" {
    #[link_name = "\u{1}_JSGlobalContextRelease"]
    pub fn JSGlobalContextRelease(ctx: JSGlobalContextRef);
}
extern "C" {
    #[link_name = "\u{1}_JSContextGetGlobalObject"]
    pub fn JSContextGetGlobalObject(ctx: JSContextRef) -> JSObjectRef;
}
extern "C" {
    #[link_name = "\u{1}_JSContextGetGroup"]
    pub fn JSContextGetGroup(ctx: JSContextRef) -> JSContextGroupRef;
}
extern "C" {
    #[link_name = "\u{1}_JSContextGetGlobalContext"]
    pub fn JSContextGetGlobalContext(ctx: JSContextRef) -> JSGlobalContextRef;
}
extern "C" {
    #[link_name = "\u{1}_JSGlobalContextCopyName"]
    pub fn JSGlobalContextCopyName(ctx: JSGlobalContextRef) -> JSStringRef;
}
extern "C" {
    #[link_name = "\u{1}_JSGlobalContextSetName"]
    pub fn JSGlobalContextSetName(ctx: JSGlobalContextRef, name: JSStringRef);
}
pub type JSChar = ::std::os::raw::c_ushort;
extern "C" {
    #[link_name = "\u{1}_JSStringCreateWithCharacters"]
    pub fn JSStringCreateWithCharacters(chars: *const JSChar, numChars: usize) -> JSStringRef;
}
extern "C" {
    #[link_name = "\u{1}_JSStringCreateWithUTF8CString"]
    pub fn JSStringCreateWithUTF8CString(string: *const ::std::os::raw::c_char) -> JSStringRef;
}
extern "C" {
    #[link_name = "\u{1}_JSStringRetain"]
    pub fn JSStringRetain(string: JSStringRef) -> JSStringRef;
}
extern "C" {
    #[link_name = "\u{1}_JSStringRelease"]
    pub fn JSStringRelease(string: JSStringRef);
}
extern "C" {
    #[link_name = "\u{1}_JSStringGetLength"]
    pub fn JSStringGetLength(string: JSStringRef) -> usize;
}
extern "C" {
    #[link_name = "\u{1}_JSStringGetCharactersPtr"]
    pub fn JSStringGetCharactersPtr(string: JSStringRef) -> *const JSChar;
}
extern "C" {
    #[link_name = "\u{1}_JSStringGetMaximumUTF8CStringSize"]
    pub fn JSStringGetMaximumUTF8CStringSize(string: JSStringRef) -> usize;
}
extern "C" {
    #[link_name = "\u{1}_JSStringGetUTF8CString"]
    pub fn JSStringGetUTF8CString(
        string: JSStringRef,
        buffer: *mut ::std::os::raw::c_char,
        bufferSize: usize,
    ) -> usize;
}
extern "C" {
    #[link_name = "\u{1}_JSStringIsEqual"]
    pub fn JSStringIsEqual(a: JSStringRef, b: JSStringRef) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_JSStringIsEqualToUTF8CString"]
    pub fn JSStringIsEqualToUTF8CString(a: JSStringRef, b: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_JSObjectMakeTypedArray"]
    pub fn JSObjectMakeTypedArray(
        ctx: JSContextRef,
        arrayType: JSTypedArrayType,
        length: usize,
        exception: *mut JSValueRef,
    ) -> JSObjectRef;
}
extern "C" {
    #[link_name = "\u{1}_JSObjectMakeTypedArrayWithBytesNoCopy"]
    pub fn JSObjectMakeTypedArrayWithBytesNoCopy(
        ctx: JSContextRef,
        arrayType: JSTypedArrayType,
        bytes: *mut ::std::os::raw::c_void,
        byteLength: usize,
        bytesDeallocator: JSTypedArrayBytesDeallocator,
        deallocatorContext: *mut ::std::os::raw::c_void,
        exception: *mut JSValueRef,
    ) -> JSObjectRef;
}
extern "C" {
    #[link_name = "\u{1}_JSObjectMakeTypedArrayWithArrayBuffer"]
    pub fn JSObjectMakeTypedArrayWithArrayBuffer(
        ctx: JSContextRef,
        arrayType: JSTypedArrayType,
        buffer: JSObjectRef,
        exception: *mut JSValueRef,
    ) -> JSObjectRef;
}
extern "C" {
    #[link_name = "\u{1}_JSObjectMakeTypedArrayWithArrayBufferAndOffset"]
    pub fn JSObjectMakeTypedArrayWithArrayBufferAndOffset(
        ctx: JSContextRef,
        arrayType: JSTypedArrayType,
        buffer: JSObjectRef,
        byteOffset: usize,
        length: usize,
        exception: *mut JSValueRef,
    ) -> JSObjectRef;
}
extern "C" {
    #[link_name = "\u{1}_JSObjectGetTypedArrayBytesPtr"]
    pub fn JSObjectGetTypedArrayBytesPtr(
        ctx: JSContextRef,
        object: JSObjectRef,
        exception: *mut JSValueRef,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_JSObjectGetTypedArrayLength"]
    pub fn JSObjectGetTypedArrayLength(
        ctx: JSContextRef,
        object: JSObjectRef,
        exception: *mut JSValueRef,
    ) -> usize;
}
extern "C" {
    #[link_name = "\u{1}_JSObjectGetTypedArrayByteLength"]
    pub fn JSObjectGetTypedArrayByteLength(
        ctx: JSContextRef,
        object: JSObjectRef,
        exception: *mut JSValueRef,
    ) -> usize;
}
extern "C" {
    #[link_name = "\u{1}_JSObjectGetTypedArrayByteOffset"]
    pub fn JSObjectGetTypedArrayByteOffset(
        ctx: JSContextRef,
        object: JSObjectRef,
        exception: *mut JSValueRef,
    ) -> usize;
}
extern "C" {
    #[link_name = "\u{1}_JSObjectGetTypedArrayBuffer"]
    pub fn JSObjectGetTypedArrayBuffer(
        ctx: JSContextRef,
        object: JSObjectRef,
        exception: *mut JSValueRef,
    ) -> JSObjectRef;
}
extern "C" {
    #[link_name = "\u{1}_JSObjectMakeArrayBufferWithBytesNoCopy"]
    pub fn JSObjectMakeArrayBufferWithBytesNoCopy(
        ctx: JSContextRef,
        bytes: *mut ::std::os::raw::c_void,
        byteLength: usize,
        bytesDeallocator: JSTypedArrayBytesDeallocator,
        deallocatorContext: *mut ::std::os::raw::c_void,
        exception: *mut JSValueRef,
    ) -> JSObjectRef;
}
extern "C" {
    #[link_name = "\u{1}_JSObjectGetArrayBufferBytesPtr"]
    pub fn JSObjectGetArrayBufferBytesPtr(
        ctx: JSContextRef,
        object: JSObjectRef,
        exception: *mut JSValueRef,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_JSObjectGetArrayBufferByteLength"]
    pub fn JSObjectGetArrayBufferByteLength(
        ctx: JSContextRef,
        object: JSObjectRef,
        exception: *mut JSValueRef,
    ) -> usize;
}
pub type ULChar16 = ::std::os::raw::c_ushort;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct C_Config {
    _unused: [u8; 0],
}
pub type ULConfig = *mut C_Config;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct C_Renderer {
    _unused: [u8; 0],
}
pub type ULRenderer = *mut C_Renderer;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct C_View {
    _unused: [u8; 0],
}
pub type ULView = *mut C_View;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct C_Bitmap {
    _unused: [u8; 0],
}
pub type ULBitmap = *mut C_Bitmap;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct C_String {
    _unused: [u8; 0],
}
pub type ULString = *mut C_String;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct C_Buffer {
    _unused: [u8; 0],
}
pub type ULBuffer = *mut C_Buffer;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct C_RenderTarget {
    _unused: [u8; 0],
}
pub type ULRenderTarget = *mut C_RenderTarget;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct C_KeyEvent {
    _unused: [u8; 0],
}
pub type ULKeyEvent = *mut C_KeyEvent;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct C_MouseEvent {
    _unused: [u8; 0],
}
pub type ULMouseEvent = *mut C_MouseEvent;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct C_ScrollEvent {
    _unused: [u8; 0],
}
pub type ULScrollEvent = *mut C_ScrollEvent;
pub const ULMessageSource_kMessageSource_XML: ULMessageSource = 0;
pub const ULMessageSource_kMessageSource_JS: ULMessageSource = 1;
pub const ULMessageSource_kMessageSource_Network: ULMessageSource = 2;
pub const ULMessageSource_kMessageSource_ConsoleAPI: ULMessageSource = 3;
pub const ULMessageSource_kMessageSource_Storage: ULMessageSource = 4;
pub const ULMessageSource_kMessageSource_AppCache: ULMessageSource = 5;
pub const ULMessageSource_kMessageSource_Rendering: ULMessageSource = 6;
pub const ULMessageSource_kMessageSource_CSS: ULMessageSource = 7;
pub const ULMessageSource_kMessageSource_Security: ULMessageSource = 8;
pub const ULMessageSource_kMessageSource_ContentBlocker: ULMessageSource = 9;
pub const ULMessageSource_kMessageSource_Other: ULMessageSource = 10;
pub type ULMessageSource = u32;
pub const ULMessageLevel_kMessageLevel_Log: ULMessageLevel = 1;
pub const ULMessageLevel_kMessageLevel_Warning: ULMessageLevel = 2;
pub const ULMessageLevel_kMessageLevel_Error: ULMessageLevel = 3;
pub const ULMessageLevel_kMessageLevel_Debug: ULMessageLevel = 4;
pub const ULMessageLevel_kMessageLevel_Info: ULMessageLevel = 5;
pub type ULMessageLevel = u32;
pub const ULCursor_kCursor_Pointer: ULCursor = 0;
pub const ULCursor_kCursor_Cross: ULCursor = 1;
pub const ULCursor_kCursor_Hand: ULCursor = 2;
pub const ULCursor_kCursor_IBeam: ULCursor = 3;
pub const ULCursor_kCursor_Wait: ULCursor = 4;
pub const ULCursor_kCursor_Help: ULCursor = 5;
pub const ULCursor_kCursor_EastResize: ULCursor = 6;
pub const ULCursor_kCursor_NorthResize: ULCursor = 7;
pub const ULCursor_kCursor_NorthEastResize: ULCursor = 8;
pub const ULCursor_kCursor_NorthWestResize: ULCursor = 9;
pub const ULCursor_kCursor_SouthResize: ULCursor = 10;
pub const ULCursor_kCursor_SouthEastResize: ULCursor = 11;
pub const ULCursor_kCursor_SouthWestResize: ULCursor = 12;
pub const ULCursor_kCursor_WestResize: ULCursor = 13;
pub const ULCursor_kCursor_NorthSouthResize: ULCursor = 14;
pub const ULCursor_kCursor_EastWestResize: ULCursor = 15;
pub const ULCursor_kCursor_NorthEastSouthWestResize: ULCursor = 16;
pub const ULCursor_kCursor_NorthWestSouthEastResize: ULCursor = 17;
pub const ULCursor_kCursor_ColumnResize: ULCursor = 18;
pub const ULCursor_kCursor_RowResize: ULCursor = 19;
pub const ULCursor_kCursor_MiddlePanning: ULCursor = 20;
pub const ULCursor_kCursor_EastPanning: ULCursor = 21;
pub const ULCursor_kCursor_NorthPanning: ULCursor = 22;
pub const ULCursor_kCursor_NorthEastPanning: ULCursor = 23;
pub const ULCursor_kCursor_NorthWestPanning: ULCursor = 24;
pub const ULCursor_kCursor_SouthPanning: ULCursor = 25;
pub const ULCursor_kCursor_SouthEastPanning: ULCursor = 26;
pub const ULCursor_kCursor_SouthWestPanning: ULCursor = 27;
pub const ULCursor_kCursor_WestPanning: ULCursor = 28;
pub const ULCursor_kCursor_Move: ULCursor = 29;
pub const ULCursor_kCursor_VerticalText: ULCursor = 30;
pub const ULCursor_kCursor_Cell: ULCursor = 31;
pub const ULCursor_kCursor_ContextMenu: ULCursor = 32;
pub const ULCursor_kCursor_Alias: ULCursor = 33;
pub const ULCursor_kCursor_Progress: ULCursor = 34;
pub const ULCursor_kCursor_NoDrop: ULCursor = 35;
pub const ULCursor_kCursor_Copy: ULCursor = 36;
pub const ULCursor_kCursor_None: ULCursor = 37;
pub const ULCursor_kCursor_NotAllowed: ULCursor = 38;
pub const ULCursor_kCursor_ZoomIn: ULCursor = 39;
pub const ULCursor_kCursor_ZoomOut: ULCursor = 40;
pub const ULCursor_kCursor_Grab: ULCursor = 41;
pub const ULCursor_kCursor_Grabbing: ULCursor = 42;
pub const ULCursor_kCursor_Custom: ULCursor = 43;
pub type ULCursor = u32;
pub const ULBitmapFormat_kBitmapFormat_A8: ULBitmapFormat = 0;
pub const ULBitmapFormat_kBitmapFormat_RGBA8: ULBitmapFormat = 1;
pub type ULBitmapFormat = u32;
pub const ULKeyEventType_kKeyEventType_KeyDown: ULKeyEventType = 0;
pub const ULKeyEventType_kKeyEventType_KeyUp: ULKeyEventType = 1;
pub const ULKeyEventType_kKeyEventType_RawKeyDown: ULKeyEventType = 2;
pub const ULKeyEventType_kKeyEventType_Char: ULKeyEventType = 3;
pub type ULKeyEventType = u32;
pub const ULMouseEventType_kMouseEventType_MouseMoved: ULMouseEventType = 0;
pub const ULMouseEventType_kMouseEventType_MouseDown: ULMouseEventType = 1;
pub const ULMouseEventType_kMouseEventType_MouseUp: ULMouseEventType = 2;
pub type ULMouseEventType = u32;
pub const ULMouseButton_kMouseButton_None: ULMouseButton = 0;
pub const ULMouseButton_kMouseButton_Left: ULMouseButton = 1;
pub const ULMouseButton_kMouseButton_Middle: ULMouseButton = 2;
pub const ULMouseButton_kMouseButton_Right: ULMouseButton = 3;
pub type ULMouseButton = u32;
pub const ULScrollEventType_kScrollEventType_ScrollByPixel: ULScrollEventType = 0;
pub const ULScrollEventType_kScrollEventType_ScrollByPage: ULScrollEventType = 1;
pub type ULScrollEventType = u32;
extern "C" {
    #[doc = " Create config with default values (see <Ultralight/platform/Config.h>)."]
    #[link_name = "\u{1}_ulCreateConfig"]
    pub fn ulCreateConfig() -> ULConfig;
}
extern "C" {
    #[doc = " Destroy config."]
    #[link_name = "\u{1}_ulDestroyConfig"]
    pub fn ulDestroyConfig(config: ULConfig);
}
extern "C" {
    #[doc = " Set whether images should be enabled (Default = True)"]
    #[link_name = "\u{1}_ulConfigSetEnableImages"]
    pub fn ulConfigSetEnableImages(config: ULConfig, enabled: bool);
}
extern "C" {
    #[doc = " Set whether JavaScript should be eanbled (Default = True)"]
    #[link_name = "\u{1}_ulConfigSetEnableJavaScript"]
    pub fn ulConfigSetEnableJavaScript(config: ULConfig, enabled: bool);
}
extern "C" {
    #[doc = " Set whether we should use BGRA byte order (instead of RGBA) for View bitmaps. (Default = False)"]
    #[link_name = "\u{1}_ulConfigSetUseBGRAForOffscreenRendering"]
    pub fn ulConfigSetUseBGRAForOffscreenRendering(config: ULConfig, enabled: bool);
}
extern "C" {
    #[doc = " Set the amount that the application DPI has been scaled, used for oversampling raster shapes. (Default = 1.0)"]
    #[link_name = "\u{1}_ulConfigSetDeviceScaleHint"]
    pub fn ulConfigSetDeviceScaleHint(config: ULConfig, value: f64);
}
extern "C" {
    #[doc = " Set default font-family to use (Default = Times New Roman)"]
    #[link_name = "\u{1}_ulConfigSetFontFamilyStandard"]
    pub fn ulConfigSetFontFamilyStandard(config: ULConfig, font_name: ULString);
}
extern "C" {
    #[doc = " Set default font-family to use for fixed fonts, eg <pre> and <code>. (Default = Courier New)"]
    #[link_name = "\u{1}_ulConfigSetFontFamilyFixed"]
    pub fn ulConfigSetFontFamilyFixed(config: ULConfig, font_name: ULString);
}
extern "C" {
    #[doc = " Set default font-family to use for serif fonts. (Default = Times New Roman)"]
    #[link_name = "\u{1}_ulConfigSetFontFamilySerif"]
    pub fn ulConfigSetFontFamilySerif(config: ULConfig, font_name: ULString);
}
extern "C" {
    #[doc = " Set default font-family to use for sans-serif fonts. (Default = Arial)"]
    #[link_name = "\u{1}_ulConfigSetFontFamilySansSerif"]
    pub fn ulConfigSetFontFamilySansSerif(config: ULConfig, font_name: ULString);
}
extern "C" {
    #[doc = " Set user agent string. (See <Ultralight/platform/Config.h> for the default)"]
    #[link_name = "\u{1}_ulConfigSetUserAgent"]
    pub fn ulConfigSetUserAgent(config: ULConfig, agent_string: ULString);
}
extern "C" {
    #[doc = " Set user stylesheet (CSS). (Default = Empty)"]
    #[link_name = "\u{1}_ulConfigSetUserStylesheet"]
    pub fn ulConfigSetUserStylesheet(config: ULConfig, css_string: ULString);
}
extern "C" {
    #[doc = " Create renderer (you should create this only once per application lifetime)."]
    #[link_name = "\u{1}_ulCreateRenderer"]
    pub fn ulCreateRenderer(config: ULConfig) -> ULRenderer;
}
extern "C" {
    #[doc = " Destroy renderer."]
    #[link_name = "\u{1}_ulDestroyRenderer"]
    pub fn ulDestroyRenderer(renderer: ULRenderer);
}
extern "C" {
    #[doc = " Update timers and dispatch internal callbacks (JavaScript and network)"]
    #[link_name = "\u{1}_ulUpdate"]
    pub fn ulUpdate(renderer: ULRenderer);
}
extern "C" {
    #[doc = " Render all active Views to their respective bitmaps."]
    #[link_name = "\u{1}_ulRender"]
    pub fn ulRender(renderer: ULRenderer);
}
extern "C" {
    #[doc = " Create a View with certain size."]
    #[link_name = "\u{1}_ulCreateView"]
    pub fn ulCreateView(
        renderer: ULRenderer,
        width: ::std::os::raw::c_uint,
        height: ::std::os::raw::c_uint,
        transparent: bool,
    ) -> ULView;
}
extern "C" {
    #[doc = " Destroy a View."]
    #[link_name = "\u{1}_ulDestroyView"]
    pub fn ulDestroyView(view: ULView);
}
extern "C" {
    #[doc = " Get current URL (don\'t destroy the returned string, it is owned by the View and has same lifetime as View)."]
    #[link_name = "\u{1}_ulViewGetURL"]
    pub fn ulViewGetURL(view: ULView) -> ULString;
}
extern "C" {
    #[doc = " Get current title (don\'t destroy the returned string, it is owned by the View and has same lifetime as View)."]
    #[link_name = "\u{1}_ulViewGetTitle"]
    pub fn ulViewGetTitle(view: ULView) -> ULString;
}
extern "C" {
    #[doc = " Check if main frame is loading."]
    #[link_name = "\u{1}_ulViewIsLoading"]
    pub fn ulViewIsLoading(view: ULView) -> bool;
}
extern "C" {
    #[doc = " Check if bitmap is dirty (has changed since last call to ulViewGetBitmap())"]
    #[link_name = "\u{1}_ulViewIsBitmapDirty"]
    pub fn ulViewIsBitmapDirty(view: ULView) -> bool;
}
extern "C" {
    #[doc = " Get bitmap (don\'t destroy the returned bitmap, it is owned by the View and has same lifetime as View)."]
    #[link_name = "\u{1}_ulViewGetBitmap"]
    pub fn ulViewGetBitmap(view: ULView) -> ULBitmap;
}
extern "C" {
    #[doc = " Load a raw string of html"]
    #[link_name = "\u{1}_ulViewLoadHTML"]
    pub fn ulViewLoadHTML(view: ULView, html_string: ULString);
}
extern "C" {
    #[doc = " Load a URL into main frame"]
    #[link_name = "\u{1}_ulViewLoadURL"]
    pub fn ulViewLoadURL(view: ULView, url_string: ULString);
}
extern "C" {
    #[doc = " Resize view to a certain width and height"]
    #[link_name = "\u{1}_ulViewResize"]
    pub fn ulViewResize(
        view: ULView,
        width: ::std::os::raw::c_uint,
        height: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[doc = " Get the page\'s JSContext for use with JavaScriptCore API"]
    #[link_name = "\u{1}_ulViewGetJSContext"]
    pub fn ulViewGetJSContext(view: ULView) -> JSContextRef;
}
extern "C" {
    #[doc = " Evaluate a raw string of JavaScript and return result"]
    #[link_name = "\u{1}_ulViewEvaluateScript"]
    pub fn ulViewEvaluateScript(view: ULView, js_string: ULString) -> JSValueRef;
}
extern "C" {
    #[doc = " Check if can navigate backwards in history"]
    #[link_name = "\u{1}_ulViewCanGoBack"]
    pub fn ulViewCanGoBack(view: ULView) -> bool;
}
extern "C" {
    #[doc = " Check if can navigate forwards in history"]
    #[link_name = "\u{1}_ulViewCanGoForward"]
    pub fn ulViewCanGoForward(view: ULView) -> bool;
}
extern "C" {
    #[doc = " Navigate backwards in history"]
    #[link_name = "\u{1}_ulViewGoBack"]
    pub fn ulViewGoBack(view: ULView);
}
extern "C" {
    #[doc = " Navigate forwards in history"]
    #[link_name = "\u{1}_ulViewGoForward"]
    pub fn ulViewGoForward(view: ULView);
}
extern "C" {
    #[doc = " Navigate to arbitrary offset in history"]
    #[link_name = "\u{1}_ulViewGoToHistoryOffset"]
    pub fn ulViewGoToHistoryOffset(view: ULView, offset: ::std::os::raw::c_int);
}
extern "C" {
    #[doc = " Reload current page"]
    #[link_name = "\u{1}_ulViewReload"]
    pub fn ulViewReload(view: ULView);
}
extern "C" {
    #[doc = " Stop all page loads"]
    #[link_name = "\u{1}_ulViewStop"]
    pub fn ulViewStop(view: ULView);
}
extern "C" {
    #[doc = " Fire a keyboard event"]
    #[link_name = "\u{1}_ulViewFireKeyEvent"]
    pub fn ulViewFireKeyEvent(view: ULView, key_event: ULKeyEvent);
}
extern "C" {
    #[doc = " Fire a mouse event"]
    #[link_name = "\u{1}_ulViewFireMouseEvent"]
    pub fn ulViewFireMouseEvent(view: ULView, mouse_event: ULMouseEvent);
}
extern "C" {
    #[doc = " Fire a scroll event"]
    #[link_name = "\u{1}_ulViewFireScrollEvent"]
    pub fn ulViewFireScrollEvent(view: ULView, scroll_event: ULScrollEvent);
}
pub type ULChangeTitleCallback = ::core::option::Option<
    unsafe extern "C" fn(user_data: *mut ::std::os::raw::c_void, caller: ULView, title: ULString),
>;
extern "C" {
    #[doc = " Set callback for when the page title changes"]
    #[link_name = "\u{1}_ulViewSetChangeTitleCallback"]
    pub fn ulViewSetChangeTitleCallback(
        view: ULView,
        callback: ULChangeTitleCallback,
        user_data: *mut ::std::os::raw::c_void,
    );
}
pub type ULChangeURLCallback = ::core::option::Option<
    unsafe extern "C" fn(user_data: *mut ::std::os::raw::c_void, caller: ULView, url: ULString),
>;
extern "C" {
    #[doc = " Set callback for when the page URL changes"]
    #[link_name = "\u{1}_ulViewSetChangeURLCallback"]
    pub fn ulViewSetChangeURLCallback(
        view: ULView,
        callback: ULChangeURLCallback,
        user_data: *mut ::std::os::raw::c_void,
    );
}
pub type ULChangeTooltipCallback = ::core::option::Option<
    unsafe extern "C" fn(user_data: *mut ::std::os::raw::c_void, caller: ULView, tooltip: ULString),
>;
extern "C" {
    #[doc = " Set callback for when the tooltip changes (usually as result of a mouse hover)"]
    #[link_name = "\u{1}_ulViewSetChangeTooltipCallback"]
    pub fn ulViewSetChangeTooltipCallback(
        view: ULView,
        callback: ULChangeTooltipCallback,
        user_data: *mut ::std::os::raw::c_void,
    );
}
pub type ULChangeCursorCallback = ::core::option::Option<
    unsafe extern "C" fn(user_data: *mut ::std::os::raw::c_void, caller: ULView, cursor: ULCursor),
>;
extern "C" {
    #[doc = " Set callback for when the mouse cursor changes"]
    #[link_name = "\u{1}_ulViewSetChangeCursorCallback"]
    pub fn ulViewSetChangeCursorCallback(
        view: ULView,
        callback: ULChangeCursorCallback,
        user_data: *mut ::std::os::raw::c_void,
    );
}
pub type ULAddConsoleMessageCallback = ::core::option::Option<
    unsafe extern "C" fn(
        user_data: *mut ::std::os::raw::c_void,
        caller: ULView,
        source: ULMessageSource,
        level: ULMessageLevel,
        message: ULString,
        line_number: ::std::os::raw::c_uint,
        column_number: ::std::os::raw::c_uint,
        source_id: ULString,
    ),
>;
extern "C" {
    #[doc = " Set callback for when a message is added to the console (useful for JavaScript / network errors and debugging)"]
    #[link_name = "\u{1}_ulViewSetAddConsoleMessageCallback"]
    pub fn ulViewSetAddConsoleMessageCallback(
        view: ULView,
        callback: ULAddConsoleMessageCallback,
        user_data: *mut ::std::os::raw::c_void,
    );
}
pub type ULBeginLoadingCallback = ::core::option::Option<
    unsafe extern "C" fn(user_data: *mut ::std::os::raw::c_void, caller: ULView),
>;
extern "C" {
    #[doc = " Set callback for when the page begins loading new URL into main frame"]
    #[link_name = "\u{1}_ulViewSetBeginLoadingCallback"]
    pub fn ulViewSetBeginLoadingCallback(
        view: ULView,
        callback: ULBeginLoadingCallback,
        user_data: *mut ::std::os::raw::c_void,
    );
}
pub type ULFinishLoadingCallback = ::core::option::Option<
    unsafe extern "C" fn(user_data: *mut ::std::os::raw::c_void, caller: ULView),
>;
extern "C" {
    #[doc = " Set callback for when the page finishes loading URL into main frame"]
    #[link_name = "\u{1}_ulViewSetFinishLoadingCallback"]
    pub fn ulViewSetFinishLoadingCallback(
        view: ULView,
        callback: ULFinishLoadingCallback,
        user_data: *mut ::std::os::raw::c_void,
    );
}
pub type ULUpdateHistoryCallback = ::core::option::Option<
    unsafe extern "C" fn(user_data: *mut ::std::os::raw::c_void, caller: ULView),
>;
extern "C" {
    #[doc = " Set callback for when the history (back/forward state) is modified"]
    #[link_name = "\u{1}_ulViewSetUpdateHistoryCallback"]
    pub fn ulViewSetUpdateHistoryCallback(
        view: ULView,
        callback: ULUpdateHistoryCallback,
        user_data: *mut ::std::os::raw::c_void,
    );
}
pub type ULDOMReadyCallback = ::core::option::Option<
    unsafe extern "C" fn(user_data: *mut ::std::os::raw::c_void, caller: ULView),
>;
extern "C" {
    #[doc = " Set callback for when all JavaScript has been parsed and the document is ready."]
    #[doc = " This is the best time to make any initial JavaScript calls to your page."]
    #[link_name = "\u{1}_ulViewSetDOMReadyCallback"]
    pub fn ulViewSetDOMReadyCallback(
        view: ULView,
        callback: ULDOMReadyCallback,
        user_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    #[doc = " Create string from null-terminated ASCII C-string"]
    #[link_name = "\u{1}_ulCreateString"]
    pub fn ulCreateString(str: *const ::std::os::raw::c_char) -> ULString;
}
extern "C" {
    #[doc = " Create string from UTF-8 buffer"]
    #[link_name = "\u{1}_ulCreateStringUTF8"]
    pub fn ulCreateStringUTF8(str: *const ::std::os::raw::c_char, len: usize) -> ULString;
}
extern "C" {
    #[doc = " Create string from UTF-16 buffer"]
    #[link_name = "\u{1}_ulCreateStringUTF16"]
    pub fn ulCreateStringUTF16(str: *mut ULChar16, len: usize) -> ULString;
}
extern "C" {
    #[doc = " Destroy string (you should destroy any strings you explicitly Create)."]
    #[link_name = "\u{1}_ulDestroyString"]
    pub fn ulDestroyString(str: ULString);
}
extern "C" {
    #[doc = " Get internal UTF-16 buffer data."]
    #[link_name = "\u{1}_ulStringGetData"]
    pub fn ulStringGetData(str: ULString) -> *mut ULChar16;
}
extern "C" {
    #[doc = " Get length in UTF-16 characters"]
    #[link_name = "\u{1}_ulStringGetLength"]
    pub fn ulStringGetLength(str: ULString) -> usize;
}
extern "C" {
    #[doc = " Whether this string is empty or not."]
    #[link_name = "\u{1}_ulStringIsEmpty"]
    pub fn ulStringIsEmpty(str: ULString) -> bool;
}
extern "C" {
    #[doc = " Create empty bitmap."]
    #[link_name = "\u{1}_ulCreateEmptyBitmap"]
    pub fn ulCreateEmptyBitmap() -> ULBitmap;
}
extern "C" {
    #[doc = " Create bitmap with certain dimensions and pixel format."]
    #[link_name = "\u{1}_ulCreateBitmap"]
    pub fn ulCreateBitmap(
        width: ::std::os::raw::c_uint,
        height: ::std::os::raw::c_uint,
        format: ULBitmapFormat,
    ) -> ULBitmap;
}
extern "C" {
    #[doc = " Create bitmap from existing pixel buffer."]
    #[link_name = "\u{1}_ulCreateBitmapFromPixels"]
    pub fn ulCreateBitmapFromPixels(
        width: ::std::os::raw::c_uint,
        height: ::std::os::raw::c_uint,
        format: ULBitmapFormat,
        row_bytes: ::std::os::raw::c_uint,
        pixels: *const ::std::os::raw::c_void,
        size: usize,
        owns_pixels: bool,
    ) -> ULBitmap;
}
extern "C" {
    #[doc = " Create bitmap from copy."]
    #[link_name = "\u{1}_ulCreateBitmapFromCopy"]
    pub fn ulCreateBitmapFromCopy(existing_bitmap: ULBitmap) -> ULBitmap;
}
extern "C" {
    #[doc = " Destroy a bitmap (you should only destroy Bitmaps you have explicitly created via ulCreateBitmapXXX())"]
    #[link_name = "\u{1}_ulDestroyBitmap"]
    pub fn ulDestroyBitmap(bitmap: ULBitmap);
}
extern "C" {
    #[link_name = "\u{1}_ulBitmapGetWidth"]
    pub fn ulBitmapGetWidth(bitmap: ULBitmap) -> ::std::os::raw::c_uint;
}
extern "C" {
    #[link_name = "\u{1}_ulBitmapGetHeight"]
    pub fn ulBitmapGetHeight(bitmap: ULBitmap) -> ::std::os::raw::c_uint;
}
extern "C" {
    #[link_name = "\u{1}_ulBitmapGetFormat"]
    pub fn ulBitmapGetFormat(bitmap: ULBitmap) -> ULBitmapFormat;
}
extern "C" {
    #[link_name = "\u{1}_ulBitmapGetBpp"]
    pub fn ulBitmapGetBpp(bitmap: ULBitmap) -> ::std::os::raw::c_uint;
}
extern "C" {
    #[link_name = "\u{1}_ulBitmapGetRowBytes"]
    pub fn ulBitmapGetRowBytes(bitmap: ULBitmap) -> ::std::os::raw::c_uint;
}
extern "C" {
    #[link_name = "\u{1}_ulBitmapGetSize"]
    pub fn ulBitmapGetSize(bitmap: ULBitmap) -> usize;
}
extern "C" {
    #[link_name = "\u{1}_ulBitmapOwnsPixels"]
    pub fn ulBitmapOwnsPixels(bitmap: ULBitmap) -> bool;
}
extern "C" {
    #[doc = " Lock pixels for reading/writing, returns pointer to pixel buffer."]
    #[link_name = "\u{1}_ulBitmapLockPixels"]
    pub fn ulBitmapLockPixels(bitmap: ULBitmap) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[doc = " Unlock pixels after locking."]
    #[link_name = "\u{1}_ulBitmapUnlockPixels"]
    pub fn ulBitmapUnlockPixels(bitmap: ULBitmap);
}
extern "C" {
    #[doc = " Get raw pixel buffer-- you should only call this if Bitmap is already locked."]
    #[link_name = "\u{1}_ulBitmapRawPixels"]
    pub fn ulBitmapRawPixels(bitmap: ULBitmap) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_ulBitmapIsEmpty"]
    pub fn ulBitmapIsEmpty(bitmap: ULBitmap) -> bool;
}
extern "C" {
    #[doc = " Reset bitmap pixels to 0."]
    #[link_name = "\u{1}_ulBitmapErase"]
    pub fn ulBitmapErase(bitmap: ULBitmap);
}
extern "C" {
    #[doc = " Write bitmap to a PNG on disk."]
    #[link_name = "\u{1}_ulBitmapWritePNG"]
    pub fn ulBitmapWritePNG(bitmap: ULBitmap, path: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    #[doc = " Create a key event, see <Ultralight/KeyEvent.h> for help with the following parameters."]
    #[link_name = "\u{1}_ulCreateKeyEvent"]
    pub fn ulCreateKeyEvent(
        type_: ULKeyEventType,
        modifiers: ::std::os::raw::c_uint,
        virtual_key_code: ::std::os::raw::c_int,
        native_key_code: ::std::os::raw::c_int,
        text: ULString,
        unmodified_text: ULString,
        is_keypad: bool,
        is_auto_repeat: bool,
        is_system_key: bool,
    ) -> ULKeyEvent;
}
extern "C" {
    #[doc = " Destroy a key event."]
    #[link_name = "\u{1}_ulDestroyKeyEvent"]
    pub fn ulDestroyKeyEvent(evt: ULKeyEvent);
}
extern "C" {
    #[doc = " Create a mouse event, see <Ultralight/MouseEvent.h> for help with the following parameters."]
    #[link_name = "\u{1}_ulCreateMouseEvent"]
    pub fn ulCreateMouseEvent(
        type_: ULMouseEventType,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        button: ULMouseButton,
    ) -> ULMouseEvent;
}
extern "C" {
    #[doc = " Destroy a mouse event."]
    #[link_name = "\u{1}_ulDestroyMouseEvent"]
    pub fn ulDestroyMouseEvent(evt: ULMouseEvent);
}
extern "C" {
    #[doc = " Create a scroll event, see <Ultralight/ScrollEvent.h> for help with the following parameters."]
    #[link_name = "\u{1}_ulCreateScrollEvent"]
    pub fn ulCreateScrollEvent(
        type_: ULScrollEventType,
        delta_x: ::std::os::raw::c_int,
        delta_y: ::std::os::raw::c_int,
    ) -> ULScrollEvent;
}
extern "C" {
    #[doc = " Destroy a scroll event."]
    #[link_name = "\u{1}_ulDestroyScrollEvent"]
    pub fn ulDestroyScrollEvent(evt: ULScrollEvent);
}
